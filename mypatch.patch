diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..9363a3f
Binary files /dev/null and b/.DS_Store differ
diff --git a/flaskr/__init__.py b/flaskr/__init__.py
index 7b3c783..1491d8c 100644
--- a/flaskr/__init__.py
+++ b/flaskr/__init__.py
@@ -43,6 +43,7 @@ def create_app(test_config=None):
     from flaskr import error_handler
     from flaskr import appointment
     from flaskr import userprofile
+    from flaskr import post
 
     app.register_blueprint(auth.bp)
     app.register_blueprint(routine.bp)
@@ -51,6 +52,7 @@ def create_app(test_config=None):
     app.register_blueprint(event.bp)
     app.register_blueprint(appointment.bp)
     app.register_blueprint(userprofile.bp)
+    app.register_blueprint(post.bp)
 
     # make url_for('index') == url_for('blog.index')
     # in another app, you might define a separate main index here with
diff --git a/flaskr/__pycache__/__init__.cpython-37.pyc b/flaskr/__pycache__/__init__.cpython-37.pyc
new file mode 100644
index 0000000..00047ac
Binary files /dev/null and b/flaskr/__pycache__/__init__.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/appointment.cpython-37.pyc b/flaskr/__pycache__/appointment.cpython-37.pyc
new file mode 100644
index 0000000..7dc1fae
Binary files /dev/null and b/flaskr/__pycache__/appointment.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/auth.cpython-37.pyc b/flaskr/__pycache__/auth.cpython-37.pyc
new file mode 100644
index 0000000..c8a10b1
Binary files /dev/null and b/flaskr/__pycache__/auth.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/core.cpython-37.pyc b/flaskr/__pycache__/core.cpython-37.pyc
new file mode 100644
index 0000000..e16c882
Binary files /dev/null and b/flaskr/__pycache__/core.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/db.cpython-37.pyc b/flaskr/__pycache__/db.cpython-37.pyc
new file mode 100644
index 0000000..95db32f
Binary files /dev/null and b/flaskr/__pycache__/db.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/error_handler.cpython-37.pyc b/flaskr/__pycache__/error_handler.cpython-37.pyc
new file mode 100644
index 0000000..b140f5e
Binary files /dev/null and b/flaskr/__pycache__/error_handler.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/event.cpython-37.pyc b/flaskr/__pycache__/event.cpython-37.pyc
new file mode 100644
index 0000000..a5aee04
Binary files /dev/null and b/flaskr/__pycache__/event.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/post.cpython-37.pyc b/flaskr/__pycache__/post.cpython-37.pyc
new file mode 100644
index 0000000..1a419cc
Binary files /dev/null and b/flaskr/__pycache__/post.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/routine.cpython-37.pyc b/flaskr/__pycache__/routine.cpython-37.pyc
new file mode 100644
index 0000000..ba8cf9b
Binary files /dev/null and b/flaskr/__pycache__/routine.cpython-37.pyc differ
diff --git a/flaskr/__pycache__/userprofile.cpython-37.pyc b/flaskr/__pycache__/userprofile.cpython-37.pyc
new file mode 100644
index 0000000..b20253c
Binary files /dev/null and b/flaskr/__pycache__/userprofile.cpython-37.pyc differ
diff --git a/flaskr/forms/__pycache__/event.cpython-37.pyc b/flaskr/forms/__pycache__/event.cpython-37.pyc
new file mode 100644
index 0000000..7c0febb
Binary files /dev/null and b/flaskr/forms/__pycache__/event.cpython-37.pyc differ
diff --git a/flaskr/forms/__pycache__/routine.cpython-37.pyc b/flaskr/forms/__pycache__/routine.cpython-37.pyc
new file mode 100644
index 0000000..52a339c
Binary files /dev/null and b/flaskr/forms/__pycache__/routine.cpython-37.pyc differ
diff --git a/flaskr/forms/post.py b/flaskr/forms/post.py
new file mode 100644
index 0000000..ab426c7
--- /dev/null
+++ b/flaskr/forms/post.py
@@ -0,0 +1,14 @@
+from flask_wtf import FlaskForm
+from wtforms import SelectField, SubmitField, DateField, TextAreaField
+from wtforms.validators import DataRequired,Email,EqualTo
+from wtforms import ValidationError
+from flask_wtf.file import FileField, FileAllowed
+from flask import flash
+import datetime
+
+
+
+class Postform(FlaskForm):
+
+    post = TextAreaField()
+    submit = SubmitField('Search available events',validators=(DataRequired(),))
diff --git a/flaskr/post.py b/flaskr/post.py
new file mode 100644
index 0000000..ff23015
--- /dev/null
+++ b/flaskr/post.py
@@ -0,0 +1,68 @@
+import datetime
+import functools
+
+from flask import Blueprint
+from flask import flash
+from flask import g
+from flask import redirect
+from flask import render_template
+from flask import request
+from flask import session
+from flask import url_for
+
+from flaskr.db import get_db
+
+
+bp = Blueprint("post", __name__, url_prefix="/post")
+
+def heading_from_dict(res):
+    heading = []
+    for key in res[0].keys():
+        heading.append(key)
+    return heading
+
+
+@bp.route('/post', methods=['GET', 'POST'])
+def post():
+    form = Postform()
+    headings = None
+    res = None
+    user_id = session["user_id"]
+
+    if form.validate_on_submit():
+        form.validate_on_submit(form.post)
+        db, cur = get_db()
+        cur.execute("""
+            SELECT *
+            FROM post AS p
+            INNER JOIN
+            SELECT post_id
+            FROM users_post AS U
+            on p.user.id = U.user_id""", (user_id, post_id, content))
+        res = cur.fetchall()
+        if not res:
+            flash("No available event, try another date")
+        else:
+            headings = heading_from_dict(res)
+            if request.form.get("submitbutton"):
+                post_id = request.form.get('submitbutton')
+                print(post_id, user_id)
+                try:
+                    cur.execute(
+                        "INSERT INTO content (user_id, post_id) VALUES (%s, %s)",
+                        (user_id, post_id),
+                    )
+                    db.commit()
+                except Exception as e:
+                    print(e)
+                    # This could happen if user clicks too quick...should find a way to solve that
+                    flash("post failure")
+
+
+#    cur.execute("SELECT username, nickname, email FROM users WHERE user_id = %s", (user_id, ))
+#    user_info = cur.fetchone()
+
+#    cur.execute("SELECT content FROM post WHERE user_id = %s", (user_id, ))
+#    post = cur.fetchone()
+
+    return render_template('post/post.html', form = form)
diff --git a/flaskr/templates/base.html b/flaskr/templates/base.html
index b77c7a3..117498a 100644
--- a/flaskr/templates/base.html
+++ b/flaskr/templates/base.html
@@ -8,6 +8,7 @@
       <li><a href="{{ url_for('routine.book') }}">Routine</a>
       <li><a href="{{ url_for('event.book') }}">Event</a>
       <li><a href="{{ url_for('appointment.manage') }}">Appointment</a>
+      <li><a href="{{ url_for('post.post') }}">post</a>
 
       <li><span>{{ g.user['username'] }}</span>
       <li><a href="{{ url_for('userprofile.show', user_id=session['user_id']) }}">User</a>
diff --git a/flaskr/templates/event/event.html b/flaskr/templates/event/event.html
index 97ecbf6..245b26e 100644
--- a/flaskr/templates/event/event.html
+++ b/flaskr/templates/event/event.html
@@ -12,4 +12,6 @@
     {% endfor %}
   </ul>
 
-{% endblock %}
\ No newline at end of file
+  
+
+{% endblock %}
diff --git a/flaskr/templates/post/post.html b/flaskr/templates/post/post.html
new file mode 100644
index 0000000..6aa1367
--- /dev/null
+++ b/flaskr/templates/post/post.html
@@ -0,0 +1,22 @@
+{% extends 'base.html' %}
+
+{% block header %}
+  <h1>{% block title %}
+        My Post
+    {% endblock %}</h1>
+{% endblock %}
+
+{% block content %}
+<ul>
+  <textarea name="name" rows="8" cols="80"></textarea>
+  <input type="submit" name="" value="Submitpost">
+</ul>
+
+<form method="POST">
+    {# This hidden_tag is a CSRF security feature. #}
+    {{ form.hidden_tag() }}
+    {{ form.submit() }}
+</form>
+
+
+{% endblock %}
